package Final;

import java.util.ArrayList;
import java.util.Collections;

public class Hand {
	private Card []cards;
	private String owner;
	
	public  boolean haspair=false;
	public  boolean hastwopair=false;
	public  boolean hasthreeofkind=false;
	public  boolean hasfourofkind=false;
	public  boolean hasflush=false;
	public  boolean hasstraight=false;
	public  boolean hasfullhouse =false;
	
	
	
	
	public Hand(String owner) {
		this.cards = new Card[5];
		this.owner = owner;
	}
	
	
	public Card[] getCards() {
		return cards;
	}
	public void setCards(Card cards[]) {
		this.cards = cards;
	}
	public String getOwner() {
		return owner;
	}
	public void setOwner(String owner) {
		this.owner = owner;
	}

	public int checkHandpower(){
		int power=0;
		String powername;
		checkforpairs();
		checkthreeofkind();
		checkFourOfkind();
		checkflush();
		checkStraight();
		checkfullhouse();
		
		
		if (haspair==true){
			power=1;
			
		}
		
		if (hastwopair==true){
			power=2;
			
		}
		if (hasthreeofkind==true){
			power=3;
			
		}
		if (hasfourofkind==true){
			power=4;
			
		}
		
		if (hasflush==true){
		power=5;
		}
		 if (hasstraight==true){
		power=6;}
		 if (hasfullhouse==true){
			 power=7;}
		
		 
		 return power;
		}
		 
	public void compare(Hand yourHand, Hand computerhand){
		int yourhandpowr=yourHand.checkHandpower();
		int computerhandpower=computerhand.checkHandpower();
		String[] arrpower={"Nothing","A pair","Two pair","Three of kind ","Four of Kind","flush","Straight","fullhouse"};
		
		yourHand.printhand();
		System.out.println(arrpower[yourhandpowr]);
		System.out.println(yourhandpowr);
		computerhand.printhand();
		System.out.println(arrpower[computerhandpower]);
		System.out.println(computerhandpower);
	}
	public  void filltheHandsWithCardsFromDeck(Hand hand1,Hand hand2,DeckOfCards Deck){
		for (int i =0; i < getCards().length; i++) {
			hand1.getCards()[i].setFace(Deck.getdeckarray()[i].getFace());
			hand1.getCards()[i].setSuit(Deck.getdeckarray()[i].getSuit());
		}
		for (int i =5; i < getCards().length+5; i++) {
			hand1.getCards()[i].setFace(Deck.getdeckarray()[i].getFace());
			hand1.getCards()[i].setSuit(Deck.getdeckarray()[i].getSuit());
		}
		
	}

    public  void checkforpairs(){  // to check for both one pair and two pair
		
		Card[]hand =getCards();
		
		boolean onepair = false;
		boolean towpair=false;
		int numofpair=0;
		Card firsteq = new Card("","");
		for (int i = 0; i < hand.length; i++) {  
			int j=i;
			for (j = j+1; j < hand.length; j++) {
				if ((hand[j].getFace()!=firsteq.getFace())&&(hand[i].getFace()==hand[j].getFace())){
					numofpair=numofpair+1;
					firsteq =hand[i];
				}
				}
			}
		if (numofpair==1){
			onepair=true;
			haspair=true;
		}
			
			else if (numofpair==2){
				towpair=true;
				hastwopair=true;
			}
		
		}
    public  void checkthreeofkind(){
		boolean isthreeofkind=false;
		Card[]hand=getCards();
		
		for (int i = 0; i < hand.length; i++) {
			
			for (int j = i+1; j < hand.length; j++) {
				
				for (int j2 = j+1; j2 < hand.length; j2++) {
					//System.out.println("checking" +hand[i]+"="+hand[j]+"="+hand[j2]);
					if(hand[i].getFace()==hand[j].getFace()&&hand[i].getFace()==hand[j2].getFace()){
						isthreeofkind=true;
						//System.out.println("three of kind");
					}
				}
			} if (isthreeofkind==true){
				hasthreeofkind=true;
			}
				
		}
	}
	public  void checkFourOfkind(){
		boolean isfourofkind=false;
		Card[] hand = getCards();
		
		for (int i = 0; i < hand.length; i++) {
			for (int j = i+1; j < hand.length; j++) {
				for (int j2 = j+1; j2 < hand.length; j2++) {
					for (int j3 = j2+1; j3 < hand.length; j3++) {
					//	System.out.println("checking" +hand[i].getFace()+"="+hand[j].getFace()+"="+hand[j2].getFace()+"="+hand[j3].getFace());
						if(hand[i].getFace()==hand[j].getFace()&&hand[i].getFace()==hand[j2].getFace()
						   && hand[i].getFace()==hand[j3].getFace() ){
							isfourofkind=true;
							}
						
					}
				}
			}
		}
		
		if (isfourofkind==true){
			hasfourofkind=true;
			
		}
		
	}
    public  void checkflush(){
			boolean isflush;
			getCards();
			Card[] hand= getCards();
			
			if (hand[0].getSuit()==hand[1].getSuit()&& hand[0].getSuit()==hand[2].getSuit()&&
				hand[0].getSuit()==hand[3].getSuit()&& hand[0].getSuit()==hand[4].getSuit()){
				
				hasflush=true;}
				
			else{
				hasflush=false;
				
			}
			}
	public  void checkStraight(){
		boolean isStraight=false;
		Card[] hand = getCards();
		
		
		ArrayList<Integer> cardsnumbers = new ArrayList<Integer>();
		for (int j = 0; j < hand.length; j++) {
			int cardnumber = 0;
	        String cardname=hand[j].getFace();
	        switch (cardname) {
	            case "Ace":  cardnumber = 1;
	            break;
	            case "Deuce":  cardnumber = 2;
                break;
	            case "Three":  cardnumber = 3;
                break;
	            case "Four":  cardnumber = 4;
                break;
	            case "AcFivee":  cardnumber = 5;
                break;
	            case "Six":  cardnumber = 6;
                break;
                case "Seven":  cardnumber = 7;
                break;
                case "Eight":  cardnumber = 8;
                break;
                case "Nine":  cardnumber = 9;
                break;
                case "Ten":  cardnumber = 10;
                break;
                case "Jack":  cardnumber = 11;
                break;
                case "Queen":  cardnumber = 12;
                break;
                case "King":  cardnumber = 13;
                break;
                
		}
	        cardsnumbers.add(cardnumber);
		}
		 Collections.sort(cardsnumbers,Collections.reverseOrder()); // to sort in Descending 
		 
		 if ((cardsnumbers.get(0)==13&&cardsnumbers.get(1)==12&&     // the special case for straight  ace-king-queen-jack-ten
				 cardsnumbers.get(2)==11&&cardsnumbers.get(3)==10&&
				 cardsnumbers.get(4)==1)||(
				 cardsnumbers.get(0)-cardsnumbers.get(1)==1
				 &&cardsnumbers.get(1)-cardsnumbers.get(2)==1
				 &&cardsnumbers.get(2)-cardsnumbers.get(3)==1
				 &&cardsnumbers.get(3)-cardsnumbers.get(4)==1)){
			 isStraight=true;
	
			 hasstraight=true;
		 }
		 else{
			
		 }
		 
	} 
    public  void checkfullhouse(){
	Card[] hand = getCards();
		
	boolean isfullshouse =false;
		ArrayList<Integer> cardsnumbers = new ArrayList<Integer>();
		for (int j = 0; j < hand.length; j++) {
			int cardnumber = 0;
	        String cardname=hand[j].getFace();
	        switch (cardname) {
	            case "Ace":  cardnumber = 1;
	                     break;
	            case "Deuce":  cardnumber = 2;
                break;
	            case "Three":  cardnumber = 3;
                break;
	            case "Four":  cardnumber = 4;
                break;
	            case "AcFivee":  cardnumber = 5;
                break;
	            case "Six":  cardnumber = 6;
                break;
                case "Seven":  cardnumber = 7;
                break;
                case "Eight":  cardnumber = 8;
                break;
                case "Nine":  cardnumber = 9;
                break;
                case "Ten":  cardnumber = 10;
                break;
                case "Jack":  cardnumber = 11;
                break;
                case "Queen":  cardnumber = 12;
                break;
                case "King":  cardnumber = 13;
                break;
                
		}
	        cardsnumbers.add(cardnumber);
		}
		 Collections.sort(cardsnumbers,Collections.reverseOrder()); // to sort in Descending 
		 
		 if ( (cardsnumbers.get(0)==cardsnumbers.get(1))&&(cardsnumbers.get(2)==cardsnumbers.get(3)&&cardsnumbers.get(3)==cardsnumbers.get(4))
				 || (cardsnumbers.get(4)==cardsnumbers.get(3))&&(cardsnumbers.get(0)==cardsnumbers.get(1)&&cardsnumbers.get(1)==cardsnumbers.get(2))){
			 isfullshouse=true;
			 
		 }
		 
		 if (isfullshouse==true){
			 hasfullhouse=true;
		 }
		
	}
	
    public  void  printhand(){
		System.out.println("______________________");
		System.out.println(getOwner());
		System.out.println("-----");
		for (int i = 0; i < getCards().length; i++) {
			System.out.println(getCards()[i].toString());
		}
		
	}

	
	
}

/*b) two pairs

c) three of a kind (e.g., three jacks)

d) four of a kind (e.g., four aces)

e) a flush (i.e., all five cards of the same suit)

f) a straight (i.e., five cards of consecutive face values)

g) a full house (i.e., two cards of one face value and three cards of another face value)
*/